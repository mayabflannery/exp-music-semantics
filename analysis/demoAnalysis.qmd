---
title: "Analysis"
format: html
editor: visual
---

```{r}
library(tidyverse)
set.seed(125)
```

## Simulate data

### Word lists

```{r}
wGenres <- c(
  "Blues", "Jazz", "Classical", "Folk", "Rock", "Alternative", "Heavy Metal", "Country", "Soundtracks", "Religion", "Pop", "Rap", "Hip-Hop", "Soul/Funk", "Electronica", "Dance"
)
wAttributes <- c(
  "Intense", "Tense", "Forceful", "Aggressive", "Angry", "Abrasive", "Strong", "Mellow", "Thrilling", "Gentle", "Manic", "Calming", "Warm", "Reflective", "Relaxing", "Romantic", "Sensual", "Happy", "Fun", "Depressing", "Merry", "Joyful", "Enthusiastic", "Lively", "Animated", "Amusing", "Sad", "Intelligent", "Sophisticated", "Inspiring", "Complex", "Poetic", "Deep", "Dreamy", "Thoughtful", "Party Music", "Emotional", "Danceable"
)
# rename this...
wSpotifyFeatures <- c(
  "Acousticness", "Danceability", "Duration", "Energy", "Instrumentalness", "Liveness", "Loudness", "Speechiness", "Tempo", "Valence"
)
wMusicFeatures <- c(
  "Loud", "Quiet", "Medium volume", "Short", "long", "medium length", "Fast", "slow", "medium speed", "Empty", "full", "cold", "acoustic", "synthetic", "Bright", "clear", "warm", "thin", "harsh", "dull", "nasal", "metallic", "wooden", "rich", "gentle", "ringing", "pure", "percussive", "evolving", "Spikey", "smooth", "mellow", "deep", "bright", "sharp" 
)
```

### Stimuli

```{r}
nStimuli <- 56
stimuli <- as.factor(seq(1, nStimuli))
```

### Participants

```{r}
nPart <- 40
pID <- as.factor(seq(1, nPart))
```


## Null dataset

```{r}
df_null <- tibble(
  pID = factor(),
  stimulus = factor(),
  genreWords = character(),
  attributeWords = character(),
  musicFeatureWords = character(),
)

for (p in pID) {
  for (s in stimuli)
  {
    # How many from each list will participant pick?
    nG <- sample(c(1,2), 1, prob = c(3,1))
    nA <- round(rnorm(1, 4, 1))
    nM <- round(rnorm(1, 4, 1))
    
    df_null <- df_null %>% add_row(
      pID = p,
      stimulus = s,
      genreWords = paste(
        unlist(sample(wGenres, nG)), collapse = ", "),
      attributeWords = paste(
        unlist(sample(wAttributes, nA)), collapse = ", "),
      musicFeatureWords = paste(
        unlist(sample(wMusicFeatures, nM)), collapse = ", ")
    )
  }
}
```

### Analysis

Group by the genre category and count usage of attribute words

```{r}
df_NullbyGenre <- df_null %>% 
  tidytext::unnest_tokens(gW, genreWords) %>% group_by(gW) %>%
  tidytext::unnest_tokens(aW, attributeWords) %>% count(aW) %>% 
  pivot_wider(names_from = aW, values_from = n)
rownames(df_NullbyGenre) <- df_NullbyGenre$gW
```

Alternatively, group by the attribute category and count usage of genre words

```{r}
df_NullbyAttribute <- df_null %>% 
  tidytext::unnest_tokens(aW, attributeWords) %>% group_by(aW) %>%
  tidytext::unnest_tokens(gW, genreWords) %>% count(gW) %>% 
  pivot_wider(names_from = gW, values_from = n)
rownames(df_NullbyAttribute) <- df_NullbyAttribute$aW
```

### Distance metric

```{r}
dist_genre <- dist(df_NullbyGenre, method = "manhattan")
```

### Plot

```{r}
df_NullbyGenre_long <- df_null %>% 
  tidytext::unnest_tokens(gW, genreWords) %>% group_by(gW) %>%
  tidytext::unnest_tokens(aW, attributeWords) %>% count(aW)

plt01 <- df_NullbyGenre_long %>% filter(gW == "blues") %>% 
  ggplot(aes(x = aW, y=n, fill = aW)) +
  geom_col() + ylab("Word frequency") + xlab("Psychological attribute") +
  ggtitle("Genre categorized as 'Blues'") + theme_minimal() +
  theme(legend.position="none",
        axis.text.x = element_text(angle=90, vjust=.5, hjust=1)) +
    scale_fill_hue(l=40)
ggsave("plt01.png", plt01, width = 8, height = 6)
```


```{r}
hc=hclust(dist_genre,method="complete")
plot(hc, main ="Hierarchical clustering of genre (Null)", xlab = "Genre distance")
# rect.hclust(hc, h = 160, border = "red")
```



## Single pattern dataset

```{r}
df_sp <- tibble(
  pID = factor(),
  stimulus = factor(),
  genreWords = character(),
  attributeWords = character(),
  musicFeatureWords = character(),
)

for (p in pID) {
  for (s in stimuli)
  {
    # How many from each list will participant pick?
    nG <- sample(c(1,2), 1, prob = c(3,1))
    nA <- round(rnorm(1, 4, 1))
    nM <- round(rnorm(1, 4, 1))
    
    gW <- paste(unlist(sample(wGenres, nG)), collapse = ", ")
    if (("Blues" %in% gW) & (rbinom(1,1,0.4))){
      aW <- paste0(wAttributes[8], ", " ,unlist( sample(wAttributes, nA - 1)), collapse = ", ")
    } else if (("Classical" %in% gW) & (rbinom(1,1,0.4))) {
      aW <- paste0(wAttributes[29], ", " ,unlist( sample(wAttributes, nA - 1)), collapse = ", ")
    } else {
      aW <- paste(unlist(sample(wAttributes, nA)), collapse = ", ")
    }
    mFW <- paste(unlist(sample(wMusicFeatures, nM)), collapse = ", ")
    
    df_sp <- df_sp %>% add_row(
      pID = p,
      stimulus = s,
      genreWords = gW,
      attributeWords = aW,
      musicFeatureWords = mFW 
    )
  }
}
```

### Analysis

Group by the genre category and count usage of attribute words

```{r}
df_SpbyGenre <- df_sp %>% 
  tidytext::unnest_tokens(gW, genreWords) %>% group_by(gW) %>%
  tidytext::unnest_tokens(aW, attributeWords) %>% count(aW) %>% 
  pivot_wider(names_from = aW, values_from = n)
rownames(df_SpbyGenre) <- df_SpbyGenre$gW
```

Alternatively, group by the attribute category and count usage of genre words

```{r}
df_SpbyAttribute <- df_sp %>% 
  tidytext::unnest_tokens(aW, attributeWords) %>% group_by(aW) %>%
  tidytext::unnest_tokens(gW, genreWords) %>% count(gW) %>% 
  pivot_wider(names_from = gW, values_from = n)
rownames(df_SpbyAttribute) <- df_SpbyAttribute$aW
```

### Distance metric

```{r}
dist_sp_genre <- dist(df_SpbyGenre, method = "manhattan")
```

### Plot

```{r}
df_SpbyGenre_long <- df_sp %>% 
  tidytext::unnest_tokens(gW, genreWords) %>% group_by(gW) %>%
  tidytext::unnest_tokens(aW, attributeWords) %>% count(aW)

plt02 <- df_SpbyGenre_long %>% filter(gW == "blues") %>% 
  ggplot(aes(x = aW, y=n, fill = aW)) +
  geom_col() + ylab("Word frequency") + xlab("Psychological attribute") +
  ggtitle("Genre categorized as 'Blues'") + theme_minimal() +
  theme(legend.position="none",
        axis.text.x = element_text(angle=90, vjust=.5, hjust=1)) +
    scale_fill_hue(l=40)
ggsave("plt02.png", plt02, width = 8, height = 6)
```



```{r}
hc=hclust(dist_sp_genre, method="complete")
plot(hc, main ="Hierarchical clustering of genre (effect)", xlab = "Genre distance")
# rect.hclust(hc, h = 160, border = "red")
```

